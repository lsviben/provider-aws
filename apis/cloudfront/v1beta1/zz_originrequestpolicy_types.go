/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CookiesConfigCookiesInitParameters struct {
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

type CookiesConfigCookiesObservation struct {
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

type CookiesConfigCookiesParameters struct {
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

type HeadersConfigHeadersInitParameters struct {
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

type HeadersConfigHeadersObservation struct {
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

type HeadersConfigHeadersParameters struct {
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

type OriginRequestPolicyCookiesConfigInitParameters struct {
	CookieBehavior *string `json:"cookieBehavior,omitempty" tf:"cookie_behavior,omitempty"`

	Cookies []CookiesConfigCookiesInitParameters `json:"cookies,omitempty" tf:"cookies,omitempty"`
}

type OriginRequestPolicyCookiesConfigObservation struct {
	CookieBehavior *string `json:"cookieBehavior,omitempty" tf:"cookie_behavior,omitempty"`

	Cookies []CookiesConfigCookiesObservation `json:"cookies,omitempty" tf:"cookies,omitempty"`
}

type OriginRequestPolicyCookiesConfigParameters struct {
	CookieBehavior *string `json:"cookieBehavior,omitempty" tf:"cookie_behavior,omitempty"`

	Cookies []CookiesConfigCookiesParameters `json:"cookies,omitempty" tf:"cookies,omitempty"`
}

type OriginRequestPolicyHeadersConfigInitParameters struct {
	HeaderBehavior *string `json:"headerBehavior,omitempty" tf:"header_behavior,omitempty"`

	Headers []HeadersConfigHeadersInitParameters `json:"headers,omitempty" tf:"headers,omitempty"`
}

type OriginRequestPolicyHeadersConfigObservation struct {
	HeaderBehavior *string `json:"headerBehavior,omitempty" tf:"header_behavior,omitempty"`

	Headers []HeadersConfigHeadersObservation `json:"headers,omitempty" tf:"headers,omitempty"`
}

type OriginRequestPolicyHeadersConfigParameters struct {
	HeaderBehavior *string `json:"headerBehavior,omitempty" tf:"header_behavior,omitempty"`

	Headers []HeadersConfigHeadersParameters `json:"headers,omitempty" tf:"headers,omitempty"`
}

type OriginRequestPolicyInitParameters struct {

	// Comment to describe the origin request policy.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the origin request key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
	CookiesConfig []OriginRequestPolicyCookiesConfigInitParameters `json:"cookiesConfig,omitempty" tf:"cookies_config,omitempty"`

	// Object that determines whether any HTTP headers (and if so, which headers) are included in the origin request key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
	HeadersConfig []OriginRequestPolicyHeadersConfigInitParameters `json:"headersConfig,omitempty" tf:"headers_config,omitempty"`

	// Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the origin request key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
	QueryStringsConfig []OriginRequestPolicyQueryStringsConfigInitParameters `json:"queryStringsConfig,omitempty" tf:"query_strings_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	Region *string `json:"region,omitempty" tf:"-"`
}

type OriginRequestPolicyObservation struct {

	// Comment to describe the origin request policy.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the origin request key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
	CookiesConfig []OriginRequestPolicyCookiesConfigObservation `json:"cookiesConfig,omitempty" tf:"cookies_config,omitempty"`

	// The current version of the origin request policy.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// Object that determines whether any HTTP headers (and if so, which headers) are included in the origin request key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
	HeadersConfig []OriginRequestPolicyHeadersConfigObservation `json:"headersConfig,omitempty" tf:"headers_config,omitempty"`

	// The identifier for the origin request policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the origin request key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
	QueryStringsConfig []OriginRequestPolicyQueryStringsConfigObservation `json:"queryStringsConfig,omitempty" tf:"query_strings_config,omitempty"`
}

type OriginRequestPolicyParameters struct {

	// Comment to describe the origin request policy.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the origin request key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
	CookiesConfig []OriginRequestPolicyCookiesConfigParameters `json:"cookiesConfig,omitempty" tf:"cookies_config,omitempty"`

	// Object that determines whether any HTTP headers (and if so, which headers) are included in the origin request key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
	HeadersConfig []OriginRequestPolicyHeadersConfigParameters `json:"headersConfig,omitempty" tf:"headers_config,omitempty"`

	// Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the origin request key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
	QueryStringsConfig []OriginRequestPolicyQueryStringsConfigParameters `json:"queryStringsConfig,omitempty" tf:"query_strings_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	Region *string `json:"region,omitempty" tf:"-"`
}

type OriginRequestPolicyQueryStringsConfigInitParameters struct {
	QueryStringBehavior *string `json:"queryStringBehavior,omitempty" tf:"query_string_behavior,omitempty"`

	QueryStrings []QueryStringsConfigQueryStringsInitParameters `json:"queryStrings,omitempty" tf:"query_strings,omitempty"`
}

type OriginRequestPolicyQueryStringsConfigObservation struct {
	QueryStringBehavior *string `json:"queryStringBehavior,omitempty" tf:"query_string_behavior,omitempty"`

	QueryStrings []QueryStringsConfigQueryStringsObservation `json:"queryStrings,omitempty" tf:"query_strings,omitempty"`
}

type OriginRequestPolicyQueryStringsConfigParameters struct {
	QueryStringBehavior *string `json:"queryStringBehavior,omitempty" tf:"query_string_behavior,omitempty"`

	QueryStrings []QueryStringsConfigQueryStringsParameters `json:"queryStrings,omitempty" tf:"query_strings,omitempty"`
}

type QueryStringsConfigQueryStringsInitParameters struct {
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

type QueryStringsConfigQueryStringsObservation struct {
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

type QueryStringsConfigQueryStringsParameters struct {
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

// OriginRequestPolicySpec defines the desired state of OriginRequestPolicy
type OriginRequestPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OriginRequestPolicyParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	InitProvider OriginRequestPolicyInitParameters `json:"initProvider,omitempty"`
}

// OriginRequestPolicyStatus defines the observed state of OriginRequestPolicy.
type OriginRequestPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OriginRequestPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OriginRequestPolicy is the Schema for the OriginRequestPolicys API. Determines the values that CloudFront includes in requests that it sends to the origin.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type OriginRequestPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cookiesConfig) || has(self.initProvider.cookiesConfig)",message="%!s(MISSING) is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.headersConfig) || has(self.initProvider.headersConfig)",message="%!s(MISSING) is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.queryStringsConfig) || has(self.initProvider.queryStringsConfig)",message="%!s(MISSING) is a required parameter"
	Spec   OriginRequestPolicySpec   `json:"spec"`
	Status OriginRequestPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OriginRequestPolicyList contains a list of OriginRequestPolicys
type OriginRequestPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OriginRequestPolicy `json:"items"`
}

// Repository type metadata.
var (
	OriginRequestPolicy_Kind             = "OriginRequestPolicy"
	OriginRequestPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OriginRequestPolicy_Kind}.String()
	OriginRequestPolicy_KindAPIVersion   = OriginRequestPolicy_Kind + "." + CRDGroupVersion.String()
	OriginRequestPolicy_GroupVersionKind = CRDGroupVersion.WithKind(OriginRequestPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&OriginRequestPolicy{}, &OriginRequestPolicyList{})
}
