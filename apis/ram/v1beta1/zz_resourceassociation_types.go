/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourceAssociationInitParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	Region *string `json:"region,omitempty" tf:"-"`

	// Amazon Resource Name (ARN) of the resource to associate with the RAM Resource Share.
	ResourceArn *string `json:"resourceArn,omitempty" tf:"resource_arn,omitempty"`

	// Amazon Resource Name (ARN) of the RAM Resource Share.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ram/v1beta1.ResourceShare
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	ResourceShareArn *string `json:"resourceShareArn,omitempty" tf:"resource_share_arn,omitempty"`

	ResourceShareArnRef *v1.Reference `json:"resourceShareArnRef,omitempty" tf:"-"`

	ResourceShareArnSelector *v1.Selector `json:"resourceShareArnSelector,omitempty" tf:"-"`
}

type ResourceAssociationObservation struct {

	// The Amazon Resource Name (ARN) of the resource share.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Amazon Resource Name (ARN) of the resource to associate with the RAM Resource Share.
	ResourceArn *string `json:"resourceArn,omitempty" tf:"resource_arn,omitempty"`

	// Amazon Resource Name (ARN) of the RAM Resource Share.
	ResourceShareArn *string `json:"resourceShareArn,omitempty" tf:"resource_share_arn,omitempty"`
}

type ResourceAssociationParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	Region *string `json:"region,omitempty" tf:"-"`

	// Amazon Resource Name (ARN) of the resource to associate with the RAM Resource Share.
	ResourceArn *string `json:"resourceArn,omitempty" tf:"resource_arn,omitempty"`

	// Amazon Resource Name (ARN) of the RAM Resource Share.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ram/v1beta1.ResourceShare
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	ResourceShareArn *string `json:"resourceShareArn,omitempty" tf:"resource_share_arn,omitempty"`

	// Reference to a ResourceShare in ram to populate resourceShareArn.
	// +kubebuilder:validation:Optional
	ResourceShareArnRef *v1.Reference `json:"resourceShareArnRef,omitempty" tf:"-"`

	// Selector for a ResourceShare in ram to populate resourceShareArn.
	// +kubebuilder:validation:Optional
	ResourceShareArnSelector *v1.Selector `json:"resourceShareArnSelector,omitempty" tf:"-"`
}

// ResourceAssociationSpec defines the desired state of ResourceAssociation
type ResourceAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceAssociationParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	InitProvider ResourceAssociationInitParameters `json:"initProvider,omitempty"`
}

// ResourceAssociationStatus defines the observed state of ResourceAssociation.
type ResourceAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceAssociation is the Schema for the ResourceAssociations API. Manages a Resource Access Manager (RAM) Resource Association.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ResourceAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceArn) || has(self.initProvider.resourceArn)",message="%!s(MISSING) is a required parameter"
	Spec   ResourceAssociationSpec   `json:"spec"`
	Status ResourceAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceAssociationList contains a list of ResourceAssociations
type ResourceAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourceAssociation `json:"items"`
}

// Repository type metadata.
var (
	ResourceAssociation_Kind             = "ResourceAssociation"
	ResourceAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResourceAssociation_Kind}.String()
	ResourceAssociation_KindAPIVersion   = ResourceAssociation_Kind + "." + CRDGroupVersion.String()
	ResourceAssociation_GroupVersionKind = CRDGroupVersion.WithKind(ResourceAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&ResourceAssociation{}, &ResourceAssociationList{})
}
