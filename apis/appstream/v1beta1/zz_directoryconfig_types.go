/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DirectoryConfigInitParameters struct {

	// Fully qualified name of the directory.
	DirectoryName *string `json:"directoryName,omitempty" tf:"directory_name,omitempty"`

	// Distinguished names of the organizational units for computer accounts.
	OrganizationalUnitDistinguishedNames []*string `json:"organizationalUnitDistinguishedNames,omitempty" tf:"organizational_unit_distinguished_names,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	Region *string `json:"region,omitempty" tf:"-"`

	// Configuration block for the name of the directory and organizational unit (OU) to use to join the directory config to a Microsoft Active Directory domain. See service_account_credentials below.
	ServiceAccountCredentials []ServiceAccountCredentialsInitParameters `json:"serviceAccountCredentials,omitempty" tf:"service_account_credentials,omitempty"`
}

type DirectoryConfigObservation struct {

	// Date and time, in UTC and extended RFC 3339 format, when the directory config was created.
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time,omitempty"`

	// Fully qualified name of the directory.
	DirectoryName *string `json:"directoryName,omitempty" tf:"directory_name,omitempty"`

	// Unique identifier (ID) of the appstream directory config.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Distinguished names of the organizational units for computer accounts.
	OrganizationalUnitDistinguishedNames []*string `json:"organizationalUnitDistinguishedNames,omitempty" tf:"organizational_unit_distinguished_names,omitempty"`

	// Configuration block for the name of the directory and organizational unit (OU) to use to join the directory config to a Microsoft Active Directory domain. See service_account_credentials below.
	ServiceAccountCredentials []ServiceAccountCredentialsObservation `json:"serviceAccountCredentials,omitempty" tf:"service_account_credentials,omitempty"`
}

type DirectoryConfigParameters struct {

	// Fully qualified name of the directory.
	DirectoryName *string `json:"directoryName,omitempty" tf:"directory_name,omitempty"`

	// Distinguished names of the organizational units for computer accounts.
	OrganizationalUnitDistinguishedNames []*string `json:"organizationalUnitDistinguishedNames,omitempty" tf:"organizational_unit_distinguished_names,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	Region *string `json:"region,omitempty" tf:"-"`

	// Configuration block for the name of the directory and organizational unit (OU) to use to join the directory config to a Microsoft Active Directory domain. See service_account_credentials below.
	ServiceAccountCredentials []ServiceAccountCredentialsParameters `json:"serviceAccountCredentials,omitempty" tf:"service_account_credentials,omitempty"`
}

type ServiceAccountCredentialsInitParameters struct {

	// User name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// Password for the account.
	AccountPasswordSecretRef v1.SecretKeySelector `json:"accountPasswordSecretRef" tf:"-"`
}

type ServiceAccountCredentialsObservation struct {

	// User name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`
}

type ServiceAccountCredentialsParameters struct {

	// User name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// Password for the account.
	AccountPasswordSecretRef v1.SecretKeySelector `json:"accountPasswordSecretRef" tf:"-"`
}

// DirectoryConfigSpec defines the desired state of DirectoryConfig
type DirectoryConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DirectoryConfigParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	InitProvider DirectoryConfigInitParameters `json:"initProvider,omitempty"`
}

// DirectoryConfigStatus defines the observed state of DirectoryConfig.
type DirectoryConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DirectoryConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DirectoryConfig is the Schema for the DirectoryConfigs API. Provides an AppStream Directory Config
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DirectoryConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.directoryName) || has(self.initProvider.directoryName)",message="%!s(MISSING) is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organizationalUnitDistinguishedNames) || has(self.initProvider.organizationalUnitDistinguishedNames)",message="%!s(MISSING) is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceAccountCredentials) || has(self.initProvider.serviceAccountCredentials)",message="%!s(MISSING) is a required parameter"
	Spec   DirectoryConfigSpec   `json:"spec"`
	Status DirectoryConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DirectoryConfigList contains a list of DirectoryConfigs
type DirectoryConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DirectoryConfig `json:"items"`
}

// Repository type metadata.
var (
	DirectoryConfig_Kind             = "DirectoryConfig"
	DirectoryConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DirectoryConfig_Kind}.String()
	DirectoryConfig_KindAPIVersion   = DirectoryConfig_Kind + "." + CRDGroupVersion.String()
	DirectoryConfig_GroupVersionKind = CRDGroupVersion.WithKind(DirectoryConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&DirectoryConfig{}, &DirectoryConfigList{})
}
